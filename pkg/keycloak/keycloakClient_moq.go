// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package keycloak

import (
	"github.com/integr8ly/keycloak-operator/pkg/apis/aerogear/v1alpha1"
	"sync"
)

var (
	lockKeycloakInterfaceMockCreateAuthenticatorConfig           sync.RWMutex
	lockKeycloakInterfaceMockCreateClient                        sync.RWMutex
	lockKeycloakInterfaceMockCreateFederatedIdentity             sync.RWMutex
	lockKeycloakInterfaceMockCreateIdentityProvider              sync.RWMutex
	lockKeycloakInterfaceMockCreateRealm                         sync.RWMutex
	lockKeycloakInterfaceMockCreateUser                          sync.RWMutex
	lockKeycloakInterfaceMockCreateUserClientRole                sync.RWMutex
	lockKeycloakInterfaceMockDeleteAuthenticatorConfig           sync.RWMutex
	lockKeycloakInterfaceMockDeleteClient                        sync.RWMutex
	lockKeycloakInterfaceMockDeleteIdentityProvider              sync.RWMutex
	lockKeycloakInterfaceMockDeleteRealm                         sync.RWMutex
	lockKeycloakInterfaceMockDeleteUser                          sync.RWMutex
	lockKeycloakInterfaceMockDeleteUserClientRole                sync.RWMutex
	lockKeycloakInterfaceMockFindUserByEmail                     sync.RWMutex
	lockKeycloakInterfaceMockFindUserByUsername                  sync.RWMutex
	lockKeycloakInterfaceMockGetAuthenticatorConfig              sync.RWMutex
	lockKeycloakInterfaceMockGetClient                           sync.RWMutex
	lockKeycloakInterfaceMockGetClientInstall                    sync.RWMutex
	lockKeycloakInterfaceMockGetClientSecret                     sync.RWMutex
	lockKeycloakInterfaceMockGetIdentityProvider                 sync.RWMutex
	lockKeycloakInterfaceMockGetRealm                            sync.RWMutex
	lockKeycloakInterfaceMockGetUser                             sync.RWMutex
	lockKeycloakInterfaceMockGetUserFederatedIdentities          sync.RWMutex
	lockKeycloakInterfaceMockListAuthenticationExecutionsForFlow sync.RWMutex
	lockKeycloakInterfaceMockListAvailableUserClientRoles        sync.RWMutex
	lockKeycloakInterfaceMockListClients                         sync.RWMutex
	lockKeycloakInterfaceMockListIdentityProviders               sync.RWMutex
	lockKeycloakInterfaceMockListRealms                          sync.RWMutex
	lockKeycloakInterfaceMockListUserClientRoles                 sync.RWMutex
	lockKeycloakInterfaceMockListUsers                           sync.RWMutex
	lockKeycloakInterfaceMockPing                                sync.RWMutex
	lockKeycloakInterfaceMockRemoveFederatedIdentity             sync.RWMutex
	lockKeycloakInterfaceMockUpdateAuthenticatorConfig           sync.RWMutex
	lockKeycloakInterfaceMockUpdateClient                        sync.RWMutex
	lockKeycloakInterfaceMockUpdateIdentityProvider              sync.RWMutex
	lockKeycloakInterfaceMockUpdatePassword                      sync.RWMutex
	lockKeycloakInterfaceMockUpdateRealm                         sync.RWMutex
	lockKeycloakInterfaceMockUpdateUser                          sync.RWMutex
)

// Ensure, that KeycloakInterfaceMock does implement KeycloakInterface.
// If this is not the case, regenerate this file with moq.
var _ KeycloakInterface = &KeycloakInterfaceMock{}

// KeycloakInterfaceMock is a mock implementation of KeycloakInterface.
//
//     func TestSomethingThatUsesKeycloakInterface(t *testing.T) {
//
//         // make and configure a mocked KeycloakInterface
//         mockedKeycloakInterface := &KeycloakInterfaceMock{
//             CreateAuthenticatorConfigFunc: func(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string, executionID string) error {
// 	               panic("mock out the CreateAuthenticatorConfig method")
//             },
//             CreateClientFunc: func(client *v1alpha1.KeycloakClient, realmName string) error {
// 	               panic("mock out the CreateClient method")
//             },
//             CreateFederatedIdentityFunc: func(fid v1alpha1.FederatedIdentity, userId string, realmName string) error {
// 	               panic("mock out the CreateFederatedIdentity method")
//             },
//             CreateIdentityProviderFunc: func(identityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) error {
// 	               panic("mock out the CreateIdentityProvider method")
//             },
//             CreateRealmFunc: func(realm *v1alpha1.KeycloakRealm) error {
// 	               panic("mock out the CreateRealm method")
//             },
//             CreateUserFunc: func(user *v1alpha1.KeycloakUser, realmName string) error {
// 	               panic("mock out the CreateUser method")
//             },
//             CreateUserClientRoleFunc: func(role *v1alpha1.KeycloakUserClientRole, realmName string, clientID string, userId string) error {
// 	               panic("mock out the CreateUserClientRole method")
//             },
//             DeleteAuthenticatorConfigFunc: func(configID string, realmName string) error {
// 	               panic("mock out the DeleteAuthenticatorConfig method")
//             },
//             DeleteClientFunc: func(clientID string, realmName string) error {
// 	               panic("mock out the DeleteClient method")
//             },
//             DeleteIdentityProviderFunc: func(alias string, realmName string) error {
// 	               panic("mock out the DeleteIdentityProvider method")
//             },
//             DeleteRealmFunc: func(realmName string) error {
// 	               panic("mock out the DeleteRealm method")
//             },
//             DeleteUserFunc: func(userID string, realmName string) error {
// 	               panic("mock out the DeleteUser method")
//             },
//             DeleteUserClientRoleFunc: func(role *v1alpha1.KeycloakUserClientRole, realmName string, clientID string, userID string) error {
// 	               panic("mock out the DeleteUserClientRole method")
//             },
//             FindUserByEmailFunc: func(email string, realm string) (*v1alpha1.KeycloakApiUser, error) {
// 	               panic("mock out the FindUserByEmail method")
//             },
//             FindUserByUsernameFunc: func(name string, realm string) (*v1alpha1.KeycloakApiUser, error) {
// 	               panic("mock out the FindUserByUsername method")
//             },
//             GetAuthenticatorConfigFunc: func(configID string, realmName string) (*v1alpha1.AuthenticatorConfig, error) {
// 	               panic("mock out the GetAuthenticatorConfig method")
//             },
//             GetClientFunc: func(clientID string, realmName string) (*v1alpha1.KeycloakClient, error) {
// 	               panic("mock out the GetClient method")
//             },
//             GetClientInstallFunc: func(clientId string, realmName string) ([]byte, error) {
// 	               panic("mock out the GetClientInstall method")
//             },
//             GetClientSecretFunc: func(clientId string, realmName string) (string, error) {
// 	               panic("mock out the GetClientSecret method")
//             },
//             GetIdentityProviderFunc: func(alias string, realmName string) (*v1alpha1.KeycloakIdentityProvider, error) {
// 	               panic("mock out the GetIdentityProvider method")
//             },
//             GetRealmFunc: func(realmName string) (*v1alpha1.KeycloakRealm, error) {
// 	               panic("mock out the GetRealm method")
//             },
//             GetUserFunc: func(userID string, realmName string) (*v1alpha1.KeycloakUser, error) {
// 	               panic("mock out the GetUser method")
//             },
//             GetUserFederatedIdentitiesFunc: func(userName string, realmName string) ([]v1alpha1.FederatedIdentity, error) {
// 	               panic("mock out the GetUserFederatedIdentities method")
//             },
//             ListAuthenticationExecutionsForFlowFunc: func(flowAlias string, realmName string) ([]*v1alpha1.AuthenticationExecutionInfo, error) {
// 	               panic("mock out the ListAuthenticationExecutionsForFlow method")
//             },
//             ListAvailableUserClientRolesFunc: func(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserClientRole, error) {
// 	               panic("mock out the ListAvailableUserClientRoles method")
//             },
//             ListClientsFunc: func(realmName string) ([]*v1alpha1.KeycloakClient, error) {
// 	               panic("mock out the ListClients method")
//             },
//             ListIdentityProvidersFunc: func(realmName string) ([]*v1alpha1.KeycloakIdentityProvider, error) {
// 	               panic("mock out the ListIdentityProviders method")
//             },
//             ListRealmsFunc: func() ([]*v1alpha1.KeycloakRealm, error) {
// 	               panic("mock out the ListRealms method")
//             },
//             ListUserClientRolesFunc: func(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserClientRole, error) {
// 	               panic("mock out the ListUserClientRoles method")
//             },
//             ListUsersFunc: func(realmName string) ([]*v1alpha1.KeycloakUser, error) {
// 	               panic("mock out the ListUsers method")
//             },
//             PingFunc: func() error {
// 	               panic("mock out the Ping method")
//             },
//             RemoveFederatedIdentityFunc: func(fid v1alpha1.FederatedIdentity, userId string, realmName string) error {
// 	               panic("mock out the RemoveFederatedIdentity method")
//             },
//             UpdateAuthenticatorConfigFunc: func(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string) error {
// 	               panic("mock out the UpdateAuthenticatorConfig method")
//             },
//             UpdateClientFunc: func(specClient *v1alpha1.KeycloakClient, realmName string) error {
// 	               panic("mock out the UpdateClient method")
//             },
//             UpdateIdentityProviderFunc: func(specIdentityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) error {
// 	               panic("mock out the UpdateIdentityProvider method")
//             },
//             UpdatePasswordFunc: func(user *v1alpha1.KeycloakApiUser, realmName string, newPass string) error {
// 	               panic("mock out the UpdatePassword method")
//             },
//             UpdateRealmFunc: func(specRealm *v1alpha1.KeycloakRealm) error {
// 	               panic("mock out the UpdateRealm method")
//             },
//             UpdateUserFunc: func(specUser *v1alpha1.KeycloakUser, realmName string) error {
// 	               panic("mock out the UpdateUser method")
//             },
//         }
//
//         // use mockedKeycloakInterface in code that requires KeycloakInterface
//         // and then make assertions.
//
//     }
type KeycloakInterfaceMock struct {
	// CreateAuthenticatorConfigFunc mocks the CreateAuthenticatorConfig method.
	CreateAuthenticatorConfigFunc func(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string, executionID string) error

	// CreateClientFunc mocks the CreateClient method.
	CreateClientFunc func(client *v1alpha1.KeycloakClient, realmName string) error

	// CreateFederatedIdentityFunc mocks the CreateFederatedIdentity method.
	CreateFederatedIdentityFunc func(fid v1alpha1.FederatedIdentity, userId string, realmName string) error

	// CreateIdentityProviderFunc mocks the CreateIdentityProvider method.
	CreateIdentityProviderFunc func(identityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) error

	// CreateRealmFunc mocks the CreateRealm method.
	CreateRealmFunc func(realm *v1alpha1.KeycloakRealm) error

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(user *v1alpha1.KeycloakUser, realmName string) error

	// CreateUserClientRoleFunc mocks the CreateUserClientRole method.
	CreateUserClientRoleFunc func(role *v1alpha1.KeycloakUserClientRole, realmName string, clientID string, userId string) error

	// DeleteAuthenticatorConfigFunc mocks the DeleteAuthenticatorConfig method.
	DeleteAuthenticatorConfigFunc func(configID string, realmName string) error

	// DeleteClientFunc mocks the DeleteClient method.
	DeleteClientFunc func(clientID string, realmName string) error

	// DeleteIdentityProviderFunc mocks the DeleteIdentityProvider method.
	DeleteIdentityProviderFunc func(alias string, realmName string) error

	// DeleteRealmFunc mocks the DeleteRealm method.
	DeleteRealmFunc func(realmName string) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(userID string, realmName string) error

	// DeleteUserClientRoleFunc mocks the DeleteUserClientRole method.
	DeleteUserClientRoleFunc func(role *v1alpha1.KeycloakUserClientRole, realmName string, clientID string, userID string) error

	// FindUserByEmailFunc mocks the FindUserByEmail method.
	FindUserByEmailFunc func(email string, realm string) (*v1alpha1.KeycloakApiUser, error)

	// FindUserByUsernameFunc mocks the FindUserByUsername method.
	FindUserByUsernameFunc func(name string, realm string) (*v1alpha1.KeycloakApiUser, error)

	// GetAuthenticatorConfigFunc mocks the GetAuthenticatorConfig method.
	GetAuthenticatorConfigFunc func(configID string, realmName string) (*v1alpha1.AuthenticatorConfig, error)

	// GetClientFunc mocks the GetClient method.
	GetClientFunc func(clientID string, realmName string) (*v1alpha1.KeycloakClient, error)

	// GetClientInstallFunc mocks the GetClientInstall method.
	GetClientInstallFunc func(clientId string, realmName string) ([]byte, error)

	// GetClientSecretFunc mocks the GetClientSecret method.
	GetClientSecretFunc func(clientId string, realmName string) (string, error)

	// GetIdentityProviderFunc mocks the GetIdentityProvider method.
	GetIdentityProviderFunc func(alias string, realmName string) (*v1alpha1.KeycloakIdentityProvider, error)

	// GetRealmFunc mocks the GetRealm method.
	GetRealmFunc func(realmName string) (*v1alpha1.KeycloakRealm, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(userID string, realmName string) (*v1alpha1.KeycloakUser, error)

	// GetUserFederatedIdentitiesFunc mocks the GetUserFederatedIdentities method.
	GetUserFederatedIdentitiesFunc func(userName string, realmName string) ([]v1alpha1.FederatedIdentity, error)

	// ListAuthenticationExecutionsForFlowFunc mocks the ListAuthenticationExecutionsForFlow method.
	ListAuthenticationExecutionsForFlowFunc func(flowAlias string, realmName string) ([]*v1alpha1.AuthenticationExecutionInfo, error)

	// ListAvailableUserClientRolesFunc mocks the ListAvailableUserClientRoles method.
	ListAvailableUserClientRolesFunc func(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserClientRole, error)

	// ListClientsFunc mocks the ListClients method.
	ListClientsFunc func(realmName string) ([]*v1alpha1.KeycloakClient, error)

	// ListIdentityProvidersFunc mocks the ListIdentityProviders method.
	ListIdentityProvidersFunc func(realmName string) ([]*v1alpha1.KeycloakIdentityProvider, error)

	// ListRealmsFunc mocks the ListRealms method.
	ListRealmsFunc func() ([]*v1alpha1.KeycloakRealm, error)

	// ListUserClientRolesFunc mocks the ListUserClientRoles method.
	ListUserClientRolesFunc func(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserClientRole, error)

	// ListUsersFunc mocks the ListUsers method.
	ListUsersFunc func(realmName string) ([]*v1alpha1.KeycloakUser, error)

	// PingFunc mocks the Ping method.
	PingFunc func() error

	// RemoveFederatedIdentityFunc mocks the RemoveFederatedIdentity method.
	RemoveFederatedIdentityFunc func(fid v1alpha1.FederatedIdentity, userId string, realmName string) error

	// UpdateAuthenticatorConfigFunc mocks the UpdateAuthenticatorConfig method.
	UpdateAuthenticatorConfigFunc func(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string) error

	// UpdateClientFunc mocks the UpdateClient method.
	UpdateClientFunc func(specClient *v1alpha1.KeycloakClient, realmName string) error

	// UpdateIdentityProviderFunc mocks the UpdateIdentityProvider method.
	UpdateIdentityProviderFunc func(specIdentityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) error

	// UpdatePasswordFunc mocks the UpdatePassword method.
	UpdatePasswordFunc func(user *v1alpha1.KeycloakApiUser, realmName string, newPass string) error

	// UpdateRealmFunc mocks the UpdateRealm method.
	UpdateRealmFunc func(specRealm *v1alpha1.KeycloakRealm) error

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(specUser *v1alpha1.KeycloakUser, realmName string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateAuthenticatorConfig holds details about calls to the CreateAuthenticatorConfig method.
		CreateAuthenticatorConfig []struct {
			// AuthenticatorConfig is the authenticatorConfig argument value.
			AuthenticatorConfig *v1alpha1.AuthenticatorConfig
			// RealmName is the realmName argument value.
			RealmName string
			// ExecutionID is the executionID argument value.
			ExecutionID string
		}
		// CreateClient holds details about calls to the CreateClient method.
		CreateClient []struct {
			// Client is the client argument value.
			Client *v1alpha1.KeycloakClient
			// RealmName is the realmName argument value.
			RealmName string
		}
		// CreateFederatedIdentity holds details about calls to the CreateFederatedIdentity method.
		CreateFederatedIdentity []struct {
			// Fid is the fid argument value.
			Fid v1alpha1.FederatedIdentity
			// UserId is the userId argument value.
			UserId string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// CreateIdentityProvider holds details about calls to the CreateIdentityProvider method.
		CreateIdentityProvider []struct {
			// IdentityProvider is the identityProvider argument value.
			IdentityProvider *v1alpha1.KeycloakIdentityProvider
			// RealmName is the realmName argument value.
			RealmName string
		}
		// CreateRealm holds details about calls to the CreateRealm method.
		CreateRealm []struct {
			// Realm is the realm argument value.
			Realm *v1alpha1.KeycloakRealm
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// User is the user argument value.
			User *v1alpha1.KeycloakUser
			// RealmName is the realmName argument value.
			RealmName string
		}
		// CreateUserClientRole holds details about calls to the CreateUserClientRole method.
		CreateUserClientRole []struct {
			// Role is the role argument value.
			Role *v1alpha1.KeycloakUserClientRole
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// UserId is the userId argument value.
			UserId string
		}
		// DeleteAuthenticatorConfig holds details about calls to the DeleteAuthenticatorConfig method.
		DeleteAuthenticatorConfig []struct {
			// ConfigID is the configID argument value.
			ConfigID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// DeleteClient holds details about calls to the DeleteClient method.
		DeleteClient []struct {
			// ClientID is the clientID argument value.
			ClientID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// DeleteIdentityProvider holds details about calls to the DeleteIdentityProvider method.
		DeleteIdentityProvider []struct {
			// Alias is the alias argument value.
			Alias string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// DeleteRealm holds details about calls to the DeleteRealm method.
		DeleteRealm []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// UserID is the userID argument value.
			UserID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// DeleteUserClientRole holds details about calls to the DeleteUserClientRole method.
		DeleteUserClientRole []struct {
			// Role is the role argument value.
			Role *v1alpha1.KeycloakUserClientRole
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
		}
		// FindUserByEmail holds details about calls to the FindUserByEmail method.
		FindUserByEmail []struct {
			// Email is the email argument value.
			Email string
			// Realm is the realm argument value.
			Realm string
		}
		// FindUserByUsername holds details about calls to the FindUserByUsername method.
		FindUserByUsername []struct {
			// Name is the name argument value.
			Name string
			// Realm is the realm argument value.
			Realm string
		}
		// GetAuthenticatorConfig holds details about calls to the GetAuthenticatorConfig method.
		GetAuthenticatorConfig []struct {
			// ConfigID is the configID argument value.
			ConfigID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
			// ClientID is the clientID argument value.
			ClientID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetClientInstall holds details about calls to the GetClientInstall method.
		GetClientInstall []struct {
			// ClientId is the clientId argument value.
			ClientId string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetClientSecret holds details about calls to the GetClientSecret method.
		GetClientSecret []struct {
			// ClientId is the clientId argument value.
			ClientId string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetIdentityProvider holds details about calls to the GetIdentityProvider method.
		GetIdentityProvider []struct {
			// Alias is the alias argument value.
			Alias string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetRealm holds details about calls to the GetRealm method.
		GetRealm []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// UserID is the userID argument value.
			UserID string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// GetUserFederatedIdentities holds details about calls to the GetUserFederatedIdentities method.
		GetUserFederatedIdentities []struct {
			// UserName is the userName argument value.
			UserName string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListAuthenticationExecutionsForFlow holds details about calls to the ListAuthenticationExecutionsForFlow method.
		ListAuthenticationExecutionsForFlow []struct {
			// FlowAlias is the flowAlias argument value.
			FlowAlias string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListAvailableUserClientRoles holds details about calls to the ListAvailableUserClientRoles method.
		ListAvailableUserClientRoles []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
		}
		// ListClients holds details about calls to the ListClients method.
		ListClients []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListIdentityProviders holds details about calls to the ListIdentityProviders method.
		ListIdentityProviders []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// ListRealms holds details about calls to the ListRealms method.
		ListRealms []struct {
		}
		// ListUserClientRoles holds details about calls to the ListUserClientRoles method.
		ListUserClientRoles []struct {
			// RealmName is the realmName argument value.
			RealmName string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
		}
		// ListUsers holds details about calls to the ListUsers method.
		ListUsers []struct {
			// RealmName is the realmName argument value.
			RealmName string
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
		}
		// RemoveFederatedIdentity holds details about calls to the RemoveFederatedIdentity method.
		RemoveFederatedIdentity []struct {
			// Fid is the fid argument value.
			Fid v1alpha1.FederatedIdentity
			// UserId is the userId argument value.
			UserId string
			// RealmName is the realmName argument value.
			RealmName string
		}
		// UpdateAuthenticatorConfig holds details about calls to the UpdateAuthenticatorConfig method.
		UpdateAuthenticatorConfig []struct {
			// AuthenticatorConfig is the authenticatorConfig argument value.
			AuthenticatorConfig *v1alpha1.AuthenticatorConfig
			// RealmName is the realmName argument value.
			RealmName string
		}
		// UpdateClient holds details about calls to the UpdateClient method.
		UpdateClient []struct {
			// SpecClient is the specClient argument value.
			SpecClient *v1alpha1.KeycloakClient
			// RealmName is the realmName argument value.
			RealmName string
		}
		// UpdateIdentityProvider holds details about calls to the UpdateIdentityProvider method.
		UpdateIdentityProvider []struct {
			// SpecIdentityProvider is the specIdentityProvider argument value.
			SpecIdentityProvider *v1alpha1.KeycloakIdentityProvider
			// RealmName is the realmName argument value.
			RealmName string
		}
		// UpdatePassword holds details about calls to the UpdatePassword method.
		UpdatePassword []struct {
			// User is the user argument value.
			User *v1alpha1.KeycloakApiUser
			// RealmName is the realmName argument value.
			RealmName string
			// NewPass is the newPass argument value.
			NewPass string
		}
		// UpdateRealm holds details about calls to the UpdateRealm method.
		UpdateRealm []struct {
			// SpecRealm is the specRealm argument value.
			SpecRealm *v1alpha1.KeycloakRealm
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// SpecUser is the specUser argument value.
			SpecUser *v1alpha1.KeycloakUser
			// RealmName is the realmName argument value.
			RealmName string
		}
	}
}

// CreateAuthenticatorConfig calls CreateAuthenticatorConfigFunc.
func (mock *KeycloakInterfaceMock) CreateAuthenticatorConfig(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string, executionID string) error {
	if mock.CreateAuthenticatorConfigFunc == nil {
		panic("KeycloakInterfaceMock.CreateAuthenticatorConfigFunc: method is nil but KeycloakInterface.CreateAuthenticatorConfig was just called")
	}
	callInfo := struct {
		AuthenticatorConfig *v1alpha1.AuthenticatorConfig
		RealmName           string
		ExecutionID         string
	}{
		AuthenticatorConfig: authenticatorConfig,
		RealmName:           realmName,
		ExecutionID:         executionID,
	}
	lockKeycloakInterfaceMockCreateAuthenticatorConfig.Lock()
	mock.calls.CreateAuthenticatorConfig = append(mock.calls.CreateAuthenticatorConfig, callInfo)
	lockKeycloakInterfaceMockCreateAuthenticatorConfig.Unlock()
	return mock.CreateAuthenticatorConfigFunc(authenticatorConfig, realmName, executionID)
}

// CreateAuthenticatorConfigCalls gets all the calls that were made to CreateAuthenticatorConfig.
// Check the length with:
//     len(mockedKeycloakInterface.CreateAuthenticatorConfigCalls())
func (mock *KeycloakInterfaceMock) CreateAuthenticatorConfigCalls() []struct {
	AuthenticatorConfig *v1alpha1.AuthenticatorConfig
	RealmName           string
	ExecutionID         string
} {
	var calls []struct {
		AuthenticatorConfig *v1alpha1.AuthenticatorConfig
		RealmName           string
		ExecutionID         string
	}
	lockKeycloakInterfaceMockCreateAuthenticatorConfig.RLock()
	calls = mock.calls.CreateAuthenticatorConfig
	lockKeycloakInterfaceMockCreateAuthenticatorConfig.RUnlock()
	return calls
}

// CreateClient calls CreateClientFunc.
func (mock *KeycloakInterfaceMock) CreateClient(client *v1alpha1.KeycloakClient, realmName string) error {
	if mock.CreateClientFunc == nil {
		panic("KeycloakInterfaceMock.CreateClientFunc: method is nil but KeycloakInterface.CreateClient was just called")
	}
	callInfo := struct {
		Client    *v1alpha1.KeycloakClient
		RealmName string
	}{
		Client:    client,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockCreateClient.Lock()
	mock.calls.CreateClient = append(mock.calls.CreateClient, callInfo)
	lockKeycloakInterfaceMockCreateClient.Unlock()
	return mock.CreateClientFunc(client, realmName)
}

// CreateClientCalls gets all the calls that were made to CreateClient.
// Check the length with:
//     len(mockedKeycloakInterface.CreateClientCalls())
func (mock *KeycloakInterfaceMock) CreateClientCalls() []struct {
	Client    *v1alpha1.KeycloakClient
	RealmName string
} {
	var calls []struct {
		Client    *v1alpha1.KeycloakClient
		RealmName string
	}
	lockKeycloakInterfaceMockCreateClient.RLock()
	calls = mock.calls.CreateClient
	lockKeycloakInterfaceMockCreateClient.RUnlock()
	return calls
}

// CreateFederatedIdentity calls CreateFederatedIdentityFunc.
func (mock *KeycloakInterfaceMock) CreateFederatedIdentity(fid v1alpha1.FederatedIdentity, userId string, realmName string) error {
	if mock.CreateFederatedIdentityFunc == nil {
		panic("KeycloakInterfaceMock.CreateFederatedIdentityFunc: method is nil but KeycloakInterface.CreateFederatedIdentity was just called")
	}
	callInfo := struct {
		Fid       v1alpha1.FederatedIdentity
		UserId    string
		RealmName string
	}{
		Fid:       fid,
		UserId:    userId,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockCreateFederatedIdentity.Lock()
	mock.calls.CreateFederatedIdentity = append(mock.calls.CreateFederatedIdentity, callInfo)
	lockKeycloakInterfaceMockCreateFederatedIdentity.Unlock()
	return mock.CreateFederatedIdentityFunc(fid, userId, realmName)
}

// CreateFederatedIdentityCalls gets all the calls that were made to CreateFederatedIdentity.
// Check the length with:
//     len(mockedKeycloakInterface.CreateFederatedIdentityCalls())
func (mock *KeycloakInterfaceMock) CreateFederatedIdentityCalls() []struct {
	Fid       v1alpha1.FederatedIdentity
	UserId    string
	RealmName string
} {
	var calls []struct {
		Fid       v1alpha1.FederatedIdentity
		UserId    string
		RealmName string
	}
	lockKeycloakInterfaceMockCreateFederatedIdentity.RLock()
	calls = mock.calls.CreateFederatedIdentity
	lockKeycloakInterfaceMockCreateFederatedIdentity.RUnlock()
	return calls
}

// CreateIdentityProvider calls CreateIdentityProviderFunc.
func (mock *KeycloakInterfaceMock) CreateIdentityProvider(identityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) error {
	if mock.CreateIdentityProviderFunc == nil {
		panic("KeycloakInterfaceMock.CreateIdentityProviderFunc: method is nil but KeycloakInterface.CreateIdentityProvider was just called")
	}
	callInfo := struct {
		IdentityProvider *v1alpha1.KeycloakIdentityProvider
		RealmName        string
	}{
		IdentityProvider: identityProvider,
		RealmName:        realmName,
	}
	lockKeycloakInterfaceMockCreateIdentityProvider.Lock()
	mock.calls.CreateIdentityProvider = append(mock.calls.CreateIdentityProvider, callInfo)
	lockKeycloakInterfaceMockCreateIdentityProvider.Unlock()
	return mock.CreateIdentityProviderFunc(identityProvider, realmName)
}

// CreateIdentityProviderCalls gets all the calls that were made to CreateIdentityProvider.
// Check the length with:
//     len(mockedKeycloakInterface.CreateIdentityProviderCalls())
func (mock *KeycloakInterfaceMock) CreateIdentityProviderCalls() []struct {
	IdentityProvider *v1alpha1.KeycloakIdentityProvider
	RealmName        string
} {
	var calls []struct {
		IdentityProvider *v1alpha1.KeycloakIdentityProvider
		RealmName        string
	}
	lockKeycloakInterfaceMockCreateIdentityProvider.RLock()
	calls = mock.calls.CreateIdentityProvider
	lockKeycloakInterfaceMockCreateIdentityProvider.RUnlock()
	return calls
}

// CreateRealm calls CreateRealmFunc.
func (mock *KeycloakInterfaceMock) CreateRealm(realm *v1alpha1.KeycloakRealm) error {
	if mock.CreateRealmFunc == nil {
		panic("KeycloakInterfaceMock.CreateRealmFunc: method is nil but KeycloakInterface.CreateRealm was just called")
	}
	callInfo := struct {
		Realm *v1alpha1.KeycloakRealm
	}{
		Realm: realm,
	}
	lockKeycloakInterfaceMockCreateRealm.Lock()
	mock.calls.CreateRealm = append(mock.calls.CreateRealm, callInfo)
	lockKeycloakInterfaceMockCreateRealm.Unlock()
	return mock.CreateRealmFunc(realm)
}

// CreateRealmCalls gets all the calls that were made to CreateRealm.
// Check the length with:
//     len(mockedKeycloakInterface.CreateRealmCalls())
func (mock *KeycloakInterfaceMock) CreateRealmCalls() []struct {
	Realm *v1alpha1.KeycloakRealm
} {
	var calls []struct {
		Realm *v1alpha1.KeycloakRealm
	}
	lockKeycloakInterfaceMockCreateRealm.RLock()
	calls = mock.calls.CreateRealm
	lockKeycloakInterfaceMockCreateRealm.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *KeycloakInterfaceMock) CreateUser(user *v1alpha1.KeycloakUser, realmName string) error {
	if mock.CreateUserFunc == nil {
		panic("KeycloakInterfaceMock.CreateUserFunc: method is nil but KeycloakInterface.CreateUser was just called")
	}
	callInfo := struct {
		User      *v1alpha1.KeycloakUser
		RealmName string
	}{
		User:      user,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	lockKeycloakInterfaceMockCreateUser.Unlock()
	return mock.CreateUserFunc(user, realmName)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedKeycloakInterface.CreateUserCalls())
func (mock *KeycloakInterfaceMock) CreateUserCalls() []struct {
	User      *v1alpha1.KeycloakUser
	RealmName string
} {
	var calls []struct {
		User      *v1alpha1.KeycloakUser
		RealmName string
	}
	lockKeycloakInterfaceMockCreateUser.RLock()
	calls = mock.calls.CreateUser
	lockKeycloakInterfaceMockCreateUser.RUnlock()
	return calls
}

// CreateUserClientRole calls CreateUserClientRoleFunc.
func (mock *KeycloakInterfaceMock) CreateUserClientRole(role *v1alpha1.KeycloakUserClientRole, realmName string, clientID string, userId string) error {
	if mock.CreateUserClientRoleFunc == nil {
		panic("KeycloakInterfaceMock.CreateUserClientRoleFunc: method is nil but KeycloakInterface.CreateUserClientRole was just called")
	}
	callInfo := struct {
		Role      *v1alpha1.KeycloakUserClientRole
		RealmName string
		ClientID  string
		UserId    string
	}{
		Role:      role,
		RealmName: realmName,
		ClientID:  clientID,
		UserId:    userId,
	}
	lockKeycloakInterfaceMockCreateUserClientRole.Lock()
	mock.calls.CreateUserClientRole = append(mock.calls.CreateUserClientRole, callInfo)
	lockKeycloakInterfaceMockCreateUserClientRole.Unlock()
	return mock.CreateUserClientRoleFunc(role, realmName, clientID, userId)
}

// CreateUserClientRoleCalls gets all the calls that were made to CreateUserClientRole.
// Check the length with:
//     len(mockedKeycloakInterface.CreateUserClientRoleCalls())
func (mock *KeycloakInterfaceMock) CreateUserClientRoleCalls() []struct {
	Role      *v1alpha1.KeycloakUserClientRole
	RealmName string
	ClientID  string
	UserId    string
} {
	var calls []struct {
		Role      *v1alpha1.KeycloakUserClientRole
		RealmName string
		ClientID  string
		UserId    string
	}
	lockKeycloakInterfaceMockCreateUserClientRole.RLock()
	calls = mock.calls.CreateUserClientRole
	lockKeycloakInterfaceMockCreateUserClientRole.RUnlock()
	return calls
}

// DeleteAuthenticatorConfig calls DeleteAuthenticatorConfigFunc.
func (mock *KeycloakInterfaceMock) DeleteAuthenticatorConfig(configID string, realmName string) error {
	if mock.DeleteAuthenticatorConfigFunc == nil {
		panic("KeycloakInterfaceMock.DeleteAuthenticatorConfigFunc: method is nil but KeycloakInterface.DeleteAuthenticatorConfig was just called")
	}
	callInfo := struct {
		ConfigID  string
		RealmName string
	}{
		ConfigID:  configID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockDeleteAuthenticatorConfig.Lock()
	mock.calls.DeleteAuthenticatorConfig = append(mock.calls.DeleteAuthenticatorConfig, callInfo)
	lockKeycloakInterfaceMockDeleteAuthenticatorConfig.Unlock()
	return mock.DeleteAuthenticatorConfigFunc(configID, realmName)
}

// DeleteAuthenticatorConfigCalls gets all the calls that were made to DeleteAuthenticatorConfig.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteAuthenticatorConfigCalls())
func (mock *KeycloakInterfaceMock) DeleteAuthenticatorConfigCalls() []struct {
	ConfigID  string
	RealmName string
} {
	var calls []struct {
		ConfigID  string
		RealmName string
	}
	lockKeycloakInterfaceMockDeleteAuthenticatorConfig.RLock()
	calls = mock.calls.DeleteAuthenticatorConfig
	lockKeycloakInterfaceMockDeleteAuthenticatorConfig.RUnlock()
	return calls
}

// DeleteClient calls DeleteClientFunc.
func (mock *KeycloakInterfaceMock) DeleteClient(clientID string, realmName string) error {
	if mock.DeleteClientFunc == nil {
		panic("KeycloakInterfaceMock.DeleteClientFunc: method is nil but KeycloakInterface.DeleteClient was just called")
	}
	callInfo := struct {
		ClientID  string
		RealmName string
	}{
		ClientID:  clientID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockDeleteClient.Lock()
	mock.calls.DeleteClient = append(mock.calls.DeleteClient, callInfo)
	lockKeycloakInterfaceMockDeleteClient.Unlock()
	return mock.DeleteClientFunc(clientID, realmName)
}

// DeleteClientCalls gets all the calls that were made to DeleteClient.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteClientCalls())
func (mock *KeycloakInterfaceMock) DeleteClientCalls() []struct {
	ClientID  string
	RealmName string
} {
	var calls []struct {
		ClientID  string
		RealmName string
	}
	lockKeycloakInterfaceMockDeleteClient.RLock()
	calls = mock.calls.DeleteClient
	lockKeycloakInterfaceMockDeleteClient.RUnlock()
	return calls
}

// DeleteIdentityProvider calls DeleteIdentityProviderFunc.
func (mock *KeycloakInterfaceMock) DeleteIdentityProvider(alias string, realmName string) error {
	if mock.DeleteIdentityProviderFunc == nil {
		panic("KeycloakInterfaceMock.DeleteIdentityProviderFunc: method is nil but KeycloakInterface.DeleteIdentityProvider was just called")
	}
	callInfo := struct {
		Alias     string
		RealmName string
	}{
		Alias:     alias,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockDeleteIdentityProvider.Lock()
	mock.calls.DeleteIdentityProvider = append(mock.calls.DeleteIdentityProvider, callInfo)
	lockKeycloakInterfaceMockDeleteIdentityProvider.Unlock()
	return mock.DeleteIdentityProviderFunc(alias, realmName)
}

// DeleteIdentityProviderCalls gets all the calls that were made to DeleteIdentityProvider.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteIdentityProviderCalls())
func (mock *KeycloakInterfaceMock) DeleteIdentityProviderCalls() []struct {
	Alias     string
	RealmName string
} {
	var calls []struct {
		Alias     string
		RealmName string
	}
	lockKeycloakInterfaceMockDeleteIdentityProvider.RLock()
	calls = mock.calls.DeleteIdentityProvider
	lockKeycloakInterfaceMockDeleteIdentityProvider.RUnlock()
	return calls
}

// DeleteRealm calls DeleteRealmFunc.
func (mock *KeycloakInterfaceMock) DeleteRealm(realmName string) error {
	if mock.DeleteRealmFunc == nil {
		panic("KeycloakInterfaceMock.DeleteRealmFunc: method is nil but KeycloakInterface.DeleteRealm was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockDeleteRealm.Lock()
	mock.calls.DeleteRealm = append(mock.calls.DeleteRealm, callInfo)
	lockKeycloakInterfaceMockDeleteRealm.Unlock()
	return mock.DeleteRealmFunc(realmName)
}

// DeleteRealmCalls gets all the calls that were made to DeleteRealm.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteRealmCalls())
func (mock *KeycloakInterfaceMock) DeleteRealmCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockDeleteRealm.RLock()
	calls = mock.calls.DeleteRealm
	lockKeycloakInterfaceMockDeleteRealm.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *KeycloakInterfaceMock) DeleteUser(userID string, realmName string) error {
	if mock.DeleteUserFunc == nil {
		panic("KeycloakInterfaceMock.DeleteUserFunc: method is nil but KeycloakInterface.DeleteUser was just called")
	}
	callInfo := struct {
		UserID    string
		RealmName string
	}{
		UserID:    userID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	lockKeycloakInterfaceMockDeleteUser.Unlock()
	return mock.DeleteUserFunc(userID, realmName)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteUserCalls())
func (mock *KeycloakInterfaceMock) DeleteUserCalls() []struct {
	UserID    string
	RealmName string
} {
	var calls []struct {
		UserID    string
		RealmName string
	}
	lockKeycloakInterfaceMockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	lockKeycloakInterfaceMockDeleteUser.RUnlock()
	return calls
}

// DeleteUserClientRole calls DeleteUserClientRoleFunc.
func (mock *KeycloakInterfaceMock) DeleteUserClientRole(role *v1alpha1.KeycloakUserClientRole, realmName string, clientID string, userID string) error {
	if mock.DeleteUserClientRoleFunc == nil {
		panic("KeycloakInterfaceMock.DeleteUserClientRoleFunc: method is nil but KeycloakInterface.DeleteUserClientRole was just called")
	}
	callInfo := struct {
		Role      *v1alpha1.KeycloakUserClientRole
		RealmName string
		ClientID  string
		UserID    string
	}{
		Role:      role,
		RealmName: realmName,
		ClientID:  clientID,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockDeleteUserClientRole.Lock()
	mock.calls.DeleteUserClientRole = append(mock.calls.DeleteUserClientRole, callInfo)
	lockKeycloakInterfaceMockDeleteUserClientRole.Unlock()
	return mock.DeleteUserClientRoleFunc(role, realmName, clientID, userID)
}

// DeleteUserClientRoleCalls gets all the calls that were made to DeleteUserClientRole.
// Check the length with:
//     len(mockedKeycloakInterface.DeleteUserClientRoleCalls())
func (mock *KeycloakInterfaceMock) DeleteUserClientRoleCalls() []struct {
	Role      *v1alpha1.KeycloakUserClientRole
	RealmName string
	ClientID  string
	UserID    string
} {
	var calls []struct {
		Role      *v1alpha1.KeycloakUserClientRole
		RealmName string
		ClientID  string
		UserID    string
	}
	lockKeycloakInterfaceMockDeleteUserClientRole.RLock()
	calls = mock.calls.DeleteUserClientRole
	lockKeycloakInterfaceMockDeleteUserClientRole.RUnlock()
	return calls
}

// FindUserByEmail calls FindUserByEmailFunc.
func (mock *KeycloakInterfaceMock) FindUserByEmail(email string, realm string) (*v1alpha1.KeycloakApiUser, error) {
	if mock.FindUserByEmailFunc == nil {
		panic("KeycloakInterfaceMock.FindUserByEmailFunc: method is nil but KeycloakInterface.FindUserByEmail was just called")
	}
	callInfo := struct {
		Email string
		Realm string
	}{
		Email: email,
		Realm: realm,
	}
	lockKeycloakInterfaceMockFindUserByEmail.Lock()
	mock.calls.FindUserByEmail = append(mock.calls.FindUserByEmail, callInfo)
	lockKeycloakInterfaceMockFindUserByEmail.Unlock()
	return mock.FindUserByEmailFunc(email, realm)
}

// FindUserByEmailCalls gets all the calls that were made to FindUserByEmail.
// Check the length with:
//     len(mockedKeycloakInterface.FindUserByEmailCalls())
func (mock *KeycloakInterfaceMock) FindUserByEmailCalls() []struct {
	Email string
	Realm string
} {
	var calls []struct {
		Email string
		Realm string
	}
	lockKeycloakInterfaceMockFindUserByEmail.RLock()
	calls = mock.calls.FindUserByEmail
	lockKeycloakInterfaceMockFindUserByEmail.RUnlock()
	return calls
}

// FindUserByUsername calls FindUserByUsernameFunc.
func (mock *KeycloakInterfaceMock) FindUserByUsername(name string, realm string) (*v1alpha1.KeycloakApiUser, error) {
	if mock.FindUserByUsernameFunc == nil {
		panic("KeycloakInterfaceMock.FindUserByUsernameFunc: method is nil but KeycloakInterface.FindUserByUsername was just called")
	}
	callInfo := struct {
		Name  string
		Realm string
	}{
		Name:  name,
		Realm: realm,
	}
	lockKeycloakInterfaceMockFindUserByUsername.Lock()
	mock.calls.FindUserByUsername = append(mock.calls.FindUserByUsername, callInfo)
	lockKeycloakInterfaceMockFindUserByUsername.Unlock()
	return mock.FindUserByUsernameFunc(name, realm)
}

// FindUserByUsernameCalls gets all the calls that were made to FindUserByUsername.
// Check the length with:
//     len(mockedKeycloakInterface.FindUserByUsernameCalls())
func (mock *KeycloakInterfaceMock) FindUserByUsernameCalls() []struct {
	Name  string
	Realm string
} {
	var calls []struct {
		Name  string
		Realm string
	}
	lockKeycloakInterfaceMockFindUserByUsername.RLock()
	calls = mock.calls.FindUserByUsername
	lockKeycloakInterfaceMockFindUserByUsername.RUnlock()
	return calls
}

// GetAuthenticatorConfig calls GetAuthenticatorConfigFunc.
func (mock *KeycloakInterfaceMock) GetAuthenticatorConfig(configID string, realmName string) (*v1alpha1.AuthenticatorConfig, error) {
	if mock.GetAuthenticatorConfigFunc == nil {
		panic("KeycloakInterfaceMock.GetAuthenticatorConfigFunc: method is nil but KeycloakInterface.GetAuthenticatorConfig was just called")
	}
	callInfo := struct {
		ConfigID  string
		RealmName string
	}{
		ConfigID:  configID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetAuthenticatorConfig.Lock()
	mock.calls.GetAuthenticatorConfig = append(mock.calls.GetAuthenticatorConfig, callInfo)
	lockKeycloakInterfaceMockGetAuthenticatorConfig.Unlock()
	return mock.GetAuthenticatorConfigFunc(configID, realmName)
}

// GetAuthenticatorConfigCalls gets all the calls that were made to GetAuthenticatorConfig.
// Check the length with:
//     len(mockedKeycloakInterface.GetAuthenticatorConfigCalls())
func (mock *KeycloakInterfaceMock) GetAuthenticatorConfigCalls() []struct {
	ConfigID  string
	RealmName string
} {
	var calls []struct {
		ConfigID  string
		RealmName string
	}
	lockKeycloakInterfaceMockGetAuthenticatorConfig.RLock()
	calls = mock.calls.GetAuthenticatorConfig
	lockKeycloakInterfaceMockGetAuthenticatorConfig.RUnlock()
	return calls
}

// GetClient calls GetClientFunc.
func (mock *KeycloakInterfaceMock) GetClient(clientID string, realmName string) (*v1alpha1.KeycloakClient, error) {
	if mock.GetClientFunc == nil {
		panic("KeycloakInterfaceMock.GetClientFunc: method is nil but KeycloakInterface.GetClient was just called")
	}
	callInfo := struct {
		ClientID  string
		RealmName string
	}{
		ClientID:  clientID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	lockKeycloakInterfaceMockGetClient.Unlock()
	return mock.GetClientFunc(clientID, realmName)
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//     len(mockedKeycloakInterface.GetClientCalls())
func (mock *KeycloakInterfaceMock) GetClientCalls() []struct {
	ClientID  string
	RealmName string
} {
	var calls []struct {
		ClientID  string
		RealmName string
	}
	lockKeycloakInterfaceMockGetClient.RLock()
	calls = mock.calls.GetClient
	lockKeycloakInterfaceMockGetClient.RUnlock()
	return calls
}

// GetClientInstall calls GetClientInstallFunc.
func (mock *KeycloakInterfaceMock) GetClientInstall(clientId string, realmName string) ([]byte, error) {
	if mock.GetClientInstallFunc == nil {
		panic("KeycloakInterfaceMock.GetClientInstallFunc: method is nil but KeycloakInterface.GetClientInstall was just called")
	}
	callInfo := struct {
		ClientId  string
		RealmName string
	}{
		ClientId:  clientId,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetClientInstall.Lock()
	mock.calls.GetClientInstall = append(mock.calls.GetClientInstall, callInfo)
	lockKeycloakInterfaceMockGetClientInstall.Unlock()
	return mock.GetClientInstallFunc(clientId, realmName)
}

// GetClientInstallCalls gets all the calls that were made to GetClientInstall.
// Check the length with:
//     len(mockedKeycloakInterface.GetClientInstallCalls())
func (mock *KeycloakInterfaceMock) GetClientInstallCalls() []struct {
	ClientId  string
	RealmName string
} {
	var calls []struct {
		ClientId  string
		RealmName string
	}
	lockKeycloakInterfaceMockGetClientInstall.RLock()
	calls = mock.calls.GetClientInstall
	lockKeycloakInterfaceMockGetClientInstall.RUnlock()
	return calls
}

// GetClientSecret calls GetClientSecretFunc.
func (mock *KeycloakInterfaceMock) GetClientSecret(clientId string, realmName string) (string, error) {
	if mock.GetClientSecretFunc == nil {
		panic("KeycloakInterfaceMock.GetClientSecretFunc: method is nil but KeycloakInterface.GetClientSecret was just called")
	}
	callInfo := struct {
		ClientId  string
		RealmName string
	}{
		ClientId:  clientId,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetClientSecret.Lock()
	mock.calls.GetClientSecret = append(mock.calls.GetClientSecret, callInfo)
	lockKeycloakInterfaceMockGetClientSecret.Unlock()
	return mock.GetClientSecretFunc(clientId, realmName)
}

// GetClientSecretCalls gets all the calls that were made to GetClientSecret.
// Check the length with:
//     len(mockedKeycloakInterface.GetClientSecretCalls())
func (mock *KeycloakInterfaceMock) GetClientSecretCalls() []struct {
	ClientId  string
	RealmName string
} {
	var calls []struct {
		ClientId  string
		RealmName string
	}
	lockKeycloakInterfaceMockGetClientSecret.RLock()
	calls = mock.calls.GetClientSecret
	lockKeycloakInterfaceMockGetClientSecret.RUnlock()
	return calls
}

// GetIdentityProvider calls GetIdentityProviderFunc.
func (mock *KeycloakInterfaceMock) GetIdentityProvider(alias string, realmName string) (*v1alpha1.KeycloakIdentityProvider, error) {
	if mock.GetIdentityProviderFunc == nil {
		panic("KeycloakInterfaceMock.GetIdentityProviderFunc: method is nil but KeycloakInterface.GetIdentityProvider was just called")
	}
	callInfo := struct {
		Alias     string
		RealmName string
	}{
		Alias:     alias,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetIdentityProvider.Lock()
	mock.calls.GetIdentityProvider = append(mock.calls.GetIdentityProvider, callInfo)
	lockKeycloakInterfaceMockGetIdentityProvider.Unlock()
	return mock.GetIdentityProviderFunc(alias, realmName)
}

// GetIdentityProviderCalls gets all the calls that were made to GetIdentityProvider.
// Check the length with:
//     len(mockedKeycloakInterface.GetIdentityProviderCalls())
func (mock *KeycloakInterfaceMock) GetIdentityProviderCalls() []struct {
	Alias     string
	RealmName string
} {
	var calls []struct {
		Alias     string
		RealmName string
	}
	lockKeycloakInterfaceMockGetIdentityProvider.RLock()
	calls = mock.calls.GetIdentityProvider
	lockKeycloakInterfaceMockGetIdentityProvider.RUnlock()
	return calls
}

// GetRealm calls GetRealmFunc.
func (mock *KeycloakInterfaceMock) GetRealm(realmName string) (*v1alpha1.KeycloakRealm, error) {
	if mock.GetRealmFunc == nil {
		panic("KeycloakInterfaceMock.GetRealmFunc: method is nil but KeycloakInterface.GetRealm was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetRealm.Lock()
	mock.calls.GetRealm = append(mock.calls.GetRealm, callInfo)
	lockKeycloakInterfaceMockGetRealm.Unlock()
	return mock.GetRealmFunc(realmName)
}

// GetRealmCalls gets all the calls that were made to GetRealm.
// Check the length with:
//     len(mockedKeycloakInterface.GetRealmCalls())
func (mock *KeycloakInterfaceMock) GetRealmCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockGetRealm.RLock()
	calls = mock.calls.GetRealm
	lockKeycloakInterfaceMockGetRealm.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *KeycloakInterfaceMock) GetUser(userID string, realmName string) (*v1alpha1.KeycloakUser, error) {
	if mock.GetUserFunc == nil {
		panic("KeycloakInterfaceMock.GetUserFunc: method is nil but KeycloakInterface.GetUser was just called")
	}
	callInfo := struct {
		UserID    string
		RealmName string
	}{
		UserID:    userID,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	lockKeycloakInterfaceMockGetUser.Unlock()
	return mock.GetUserFunc(userID, realmName)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//     len(mockedKeycloakInterface.GetUserCalls())
func (mock *KeycloakInterfaceMock) GetUserCalls() []struct {
	UserID    string
	RealmName string
} {
	var calls []struct {
		UserID    string
		RealmName string
	}
	lockKeycloakInterfaceMockGetUser.RLock()
	calls = mock.calls.GetUser
	lockKeycloakInterfaceMockGetUser.RUnlock()
	return calls
}

// GetUserFederatedIdentities calls GetUserFederatedIdentitiesFunc.
func (mock *KeycloakInterfaceMock) GetUserFederatedIdentities(userName string, realmName string) ([]v1alpha1.FederatedIdentity, error) {
	if mock.GetUserFederatedIdentitiesFunc == nil {
		panic("KeycloakInterfaceMock.GetUserFederatedIdentitiesFunc: method is nil but KeycloakInterface.GetUserFederatedIdentities was just called")
	}
	callInfo := struct {
		UserName  string
		RealmName string
	}{
		UserName:  userName,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockGetUserFederatedIdentities.Lock()
	mock.calls.GetUserFederatedIdentities = append(mock.calls.GetUserFederatedIdentities, callInfo)
	lockKeycloakInterfaceMockGetUserFederatedIdentities.Unlock()
	return mock.GetUserFederatedIdentitiesFunc(userName, realmName)
}

// GetUserFederatedIdentitiesCalls gets all the calls that were made to GetUserFederatedIdentities.
// Check the length with:
//     len(mockedKeycloakInterface.GetUserFederatedIdentitiesCalls())
func (mock *KeycloakInterfaceMock) GetUserFederatedIdentitiesCalls() []struct {
	UserName  string
	RealmName string
} {
	var calls []struct {
		UserName  string
		RealmName string
	}
	lockKeycloakInterfaceMockGetUserFederatedIdentities.RLock()
	calls = mock.calls.GetUserFederatedIdentities
	lockKeycloakInterfaceMockGetUserFederatedIdentities.RUnlock()
	return calls
}

// ListAuthenticationExecutionsForFlow calls ListAuthenticationExecutionsForFlowFunc.
func (mock *KeycloakInterfaceMock) ListAuthenticationExecutionsForFlow(flowAlias string, realmName string) ([]*v1alpha1.AuthenticationExecutionInfo, error) {
	if mock.ListAuthenticationExecutionsForFlowFunc == nil {
		panic("KeycloakInterfaceMock.ListAuthenticationExecutionsForFlowFunc: method is nil but KeycloakInterface.ListAuthenticationExecutionsForFlow was just called")
	}
	callInfo := struct {
		FlowAlias string
		RealmName string
	}{
		FlowAlias: flowAlias,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockListAuthenticationExecutionsForFlow.Lock()
	mock.calls.ListAuthenticationExecutionsForFlow = append(mock.calls.ListAuthenticationExecutionsForFlow, callInfo)
	lockKeycloakInterfaceMockListAuthenticationExecutionsForFlow.Unlock()
	return mock.ListAuthenticationExecutionsForFlowFunc(flowAlias, realmName)
}

// ListAuthenticationExecutionsForFlowCalls gets all the calls that were made to ListAuthenticationExecutionsForFlow.
// Check the length with:
//     len(mockedKeycloakInterface.ListAuthenticationExecutionsForFlowCalls())
func (mock *KeycloakInterfaceMock) ListAuthenticationExecutionsForFlowCalls() []struct {
	FlowAlias string
	RealmName string
} {
	var calls []struct {
		FlowAlias string
		RealmName string
	}
	lockKeycloakInterfaceMockListAuthenticationExecutionsForFlow.RLock()
	calls = mock.calls.ListAuthenticationExecutionsForFlow
	lockKeycloakInterfaceMockListAuthenticationExecutionsForFlow.RUnlock()
	return calls
}

// ListAvailableUserClientRoles calls ListAvailableUserClientRolesFunc.
func (mock *KeycloakInterfaceMock) ListAvailableUserClientRoles(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserClientRole, error) {
	if mock.ListAvailableUserClientRolesFunc == nil {
		panic("KeycloakInterfaceMock.ListAvailableUserClientRolesFunc: method is nil but KeycloakInterface.ListAvailableUserClientRoles was just called")
	}
	callInfo := struct {
		RealmName string
		ClientID  string
		UserID    string
	}{
		RealmName: realmName,
		ClientID:  clientID,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockListAvailableUserClientRoles.Lock()
	mock.calls.ListAvailableUserClientRoles = append(mock.calls.ListAvailableUserClientRoles, callInfo)
	lockKeycloakInterfaceMockListAvailableUserClientRoles.Unlock()
	return mock.ListAvailableUserClientRolesFunc(realmName, clientID, userID)
}

// ListAvailableUserClientRolesCalls gets all the calls that were made to ListAvailableUserClientRoles.
// Check the length with:
//     len(mockedKeycloakInterface.ListAvailableUserClientRolesCalls())
func (mock *KeycloakInterfaceMock) ListAvailableUserClientRolesCalls() []struct {
	RealmName string
	ClientID  string
	UserID    string
} {
	var calls []struct {
		RealmName string
		ClientID  string
		UserID    string
	}
	lockKeycloakInterfaceMockListAvailableUserClientRoles.RLock()
	calls = mock.calls.ListAvailableUserClientRoles
	lockKeycloakInterfaceMockListAvailableUserClientRoles.RUnlock()
	return calls
}

// ListClients calls ListClientsFunc.
func (mock *KeycloakInterfaceMock) ListClients(realmName string) ([]*v1alpha1.KeycloakClient, error) {
	if mock.ListClientsFunc == nil {
		panic("KeycloakInterfaceMock.ListClientsFunc: method is nil but KeycloakInterface.ListClients was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockListClients.Lock()
	mock.calls.ListClients = append(mock.calls.ListClients, callInfo)
	lockKeycloakInterfaceMockListClients.Unlock()
	return mock.ListClientsFunc(realmName)
}

// ListClientsCalls gets all the calls that were made to ListClients.
// Check the length with:
//     len(mockedKeycloakInterface.ListClientsCalls())
func (mock *KeycloakInterfaceMock) ListClientsCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockListClients.RLock()
	calls = mock.calls.ListClients
	lockKeycloakInterfaceMockListClients.RUnlock()
	return calls
}

// ListIdentityProviders calls ListIdentityProvidersFunc.
func (mock *KeycloakInterfaceMock) ListIdentityProviders(realmName string) ([]*v1alpha1.KeycloakIdentityProvider, error) {
	if mock.ListIdentityProvidersFunc == nil {
		panic("KeycloakInterfaceMock.ListIdentityProvidersFunc: method is nil but KeycloakInterface.ListIdentityProviders was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockListIdentityProviders.Lock()
	mock.calls.ListIdentityProviders = append(mock.calls.ListIdentityProviders, callInfo)
	lockKeycloakInterfaceMockListIdentityProviders.Unlock()
	return mock.ListIdentityProvidersFunc(realmName)
}

// ListIdentityProvidersCalls gets all the calls that were made to ListIdentityProviders.
// Check the length with:
//     len(mockedKeycloakInterface.ListIdentityProvidersCalls())
func (mock *KeycloakInterfaceMock) ListIdentityProvidersCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockListIdentityProviders.RLock()
	calls = mock.calls.ListIdentityProviders
	lockKeycloakInterfaceMockListIdentityProviders.RUnlock()
	return calls
}

// ListRealms calls ListRealmsFunc.
func (mock *KeycloakInterfaceMock) ListRealms() ([]*v1alpha1.KeycloakRealm, error) {
	if mock.ListRealmsFunc == nil {
		panic("KeycloakInterfaceMock.ListRealmsFunc: method is nil but KeycloakInterface.ListRealms was just called")
	}
	callInfo := struct {
	}{}
	lockKeycloakInterfaceMockListRealms.Lock()
	mock.calls.ListRealms = append(mock.calls.ListRealms, callInfo)
	lockKeycloakInterfaceMockListRealms.Unlock()
	return mock.ListRealmsFunc()
}

// ListRealmsCalls gets all the calls that were made to ListRealms.
// Check the length with:
//     len(mockedKeycloakInterface.ListRealmsCalls())
func (mock *KeycloakInterfaceMock) ListRealmsCalls() []struct {
} {
	var calls []struct {
	}
	lockKeycloakInterfaceMockListRealms.RLock()
	calls = mock.calls.ListRealms
	lockKeycloakInterfaceMockListRealms.RUnlock()
	return calls
}

// ListUserClientRoles calls ListUserClientRolesFunc.
func (mock *KeycloakInterfaceMock) ListUserClientRoles(realmName string, clientID string, userID string) ([]*v1alpha1.KeycloakUserClientRole, error) {
	if mock.ListUserClientRolesFunc == nil {
		panic("KeycloakInterfaceMock.ListUserClientRolesFunc: method is nil but KeycloakInterface.ListUserClientRoles was just called")
	}
	callInfo := struct {
		RealmName string
		ClientID  string
		UserID    string
	}{
		RealmName: realmName,
		ClientID:  clientID,
		UserID:    userID,
	}
	lockKeycloakInterfaceMockListUserClientRoles.Lock()
	mock.calls.ListUserClientRoles = append(mock.calls.ListUserClientRoles, callInfo)
	lockKeycloakInterfaceMockListUserClientRoles.Unlock()
	return mock.ListUserClientRolesFunc(realmName, clientID, userID)
}

// ListUserClientRolesCalls gets all the calls that were made to ListUserClientRoles.
// Check the length with:
//     len(mockedKeycloakInterface.ListUserClientRolesCalls())
func (mock *KeycloakInterfaceMock) ListUserClientRolesCalls() []struct {
	RealmName string
	ClientID  string
	UserID    string
} {
	var calls []struct {
		RealmName string
		ClientID  string
		UserID    string
	}
	lockKeycloakInterfaceMockListUserClientRoles.RLock()
	calls = mock.calls.ListUserClientRoles
	lockKeycloakInterfaceMockListUserClientRoles.RUnlock()
	return calls
}

// ListUsers calls ListUsersFunc.
func (mock *KeycloakInterfaceMock) ListUsers(realmName string) ([]*v1alpha1.KeycloakUser, error) {
	if mock.ListUsersFunc == nil {
		panic("KeycloakInterfaceMock.ListUsersFunc: method is nil but KeycloakInterface.ListUsers was just called")
	}
	callInfo := struct {
		RealmName string
	}{
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockListUsers.Lock()
	mock.calls.ListUsers = append(mock.calls.ListUsers, callInfo)
	lockKeycloakInterfaceMockListUsers.Unlock()
	return mock.ListUsersFunc(realmName)
}

// ListUsersCalls gets all the calls that were made to ListUsers.
// Check the length with:
//     len(mockedKeycloakInterface.ListUsersCalls())
func (mock *KeycloakInterfaceMock) ListUsersCalls() []struct {
	RealmName string
} {
	var calls []struct {
		RealmName string
	}
	lockKeycloakInterfaceMockListUsers.RLock()
	calls = mock.calls.ListUsers
	lockKeycloakInterfaceMockListUsers.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *KeycloakInterfaceMock) Ping() error {
	if mock.PingFunc == nil {
		panic("KeycloakInterfaceMock.PingFunc: method is nil but KeycloakInterface.Ping was just called")
	}
	callInfo := struct {
	}{}
	lockKeycloakInterfaceMockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	lockKeycloakInterfaceMockPing.Unlock()
	return mock.PingFunc()
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//     len(mockedKeycloakInterface.PingCalls())
func (mock *KeycloakInterfaceMock) PingCalls() []struct {
} {
	var calls []struct {
	}
	lockKeycloakInterfaceMockPing.RLock()
	calls = mock.calls.Ping
	lockKeycloakInterfaceMockPing.RUnlock()
	return calls
}

// RemoveFederatedIdentity calls RemoveFederatedIdentityFunc.
func (mock *KeycloakInterfaceMock) RemoveFederatedIdentity(fid v1alpha1.FederatedIdentity, userId string, realmName string) error {
	if mock.RemoveFederatedIdentityFunc == nil {
		panic("KeycloakInterfaceMock.RemoveFederatedIdentityFunc: method is nil but KeycloakInterface.RemoveFederatedIdentity was just called")
	}
	callInfo := struct {
		Fid       v1alpha1.FederatedIdentity
		UserId    string
		RealmName string
	}{
		Fid:       fid,
		UserId:    userId,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockRemoveFederatedIdentity.Lock()
	mock.calls.RemoveFederatedIdentity = append(mock.calls.RemoveFederatedIdentity, callInfo)
	lockKeycloakInterfaceMockRemoveFederatedIdentity.Unlock()
	return mock.RemoveFederatedIdentityFunc(fid, userId, realmName)
}

// RemoveFederatedIdentityCalls gets all the calls that were made to RemoveFederatedIdentity.
// Check the length with:
//     len(mockedKeycloakInterface.RemoveFederatedIdentityCalls())
func (mock *KeycloakInterfaceMock) RemoveFederatedIdentityCalls() []struct {
	Fid       v1alpha1.FederatedIdentity
	UserId    string
	RealmName string
} {
	var calls []struct {
		Fid       v1alpha1.FederatedIdentity
		UserId    string
		RealmName string
	}
	lockKeycloakInterfaceMockRemoveFederatedIdentity.RLock()
	calls = mock.calls.RemoveFederatedIdentity
	lockKeycloakInterfaceMockRemoveFederatedIdentity.RUnlock()
	return calls
}

// UpdateAuthenticatorConfig calls UpdateAuthenticatorConfigFunc.
func (mock *KeycloakInterfaceMock) UpdateAuthenticatorConfig(authenticatorConfig *v1alpha1.AuthenticatorConfig, realmName string) error {
	if mock.UpdateAuthenticatorConfigFunc == nil {
		panic("KeycloakInterfaceMock.UpdateAuthenticatorConfigFunc: method is nil but KeycloakInterface.UpdateAuthenticatorConfig was just called")
	}
	callInfo := struct {
		AuthenticatorConfig *v1alpha1.AuthenticatorConfig
		RealmName           string
	}{
		AuthenticatorConfig: authenticatorConfig,
		RealmName:           realmName,
	}
	lockKeycloakInterfaceMockUpdateAuthenticatorConfig.Lock()
	mock.calls.UpdateAuthenticatorConfig = append(mock.calls.UpdateAuthenticatorConfig, callInfo)
	lockKeycloakInterfaceMockUpdateAuthenticatorConfig.Unlock()
	return mock.UpdateAuthenticatorConfigFunc(authenticatorConfig, realmName)
}

// UpdateAuthenticatorConfigCalls gets all the calls that were made to UpdateAuthenticatorConfig.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateAuthenticatorConfigCalls())
func (mock *KeycloakInterfaceMock) UpdateAuthenticatorConfigCalls() []struct {
	AuthenticatorConfig *v1alpha1.AuthenticatorConfig
	RealmName           string
} {
	var calls []struct {
		AuthenticatorConfig *v1alpha1.AuthenticatorConfig
		RealmName           string
	}
	lockKeycloakInterfaceMockUpdateAuthenticatorConfig.RLock()
	calls = mock.calls.UpdateAuthenticatorConfig
	lockKeycloakInterfaceMockUpdateAuthenticatorConfig.RUnlock()
	return calls
}

// UpdateClient calls UpdateClientFunc.
func (mock *KeycloakInterfaceMock) UpdateClient(specClient *v1alpha1.KeycloakClient, realmName string) error {
	if mock.UpdateClientFunc == nil {
		panic("KeycloakInterfaceMock.UpdateClientFunc: method is nil but KeycloakInterface.UpdateClient was just called")
	}
	callInfo := struct {
		SpecClient *v1alpha1.KeycloakClient
		RealmName  string
	}{
		SpecClient: specClient,
		RealmName:  realmName,
	}
	lockKeycloakInterfaceMockUpdateClient.Lock()
	mock.calls.UpdateClient = append(mock.calls.UpdateClient, callInfo)
	lockKeycloakInterfaceMockUpdateClient.Unlock()
	return mock.UpdateClientFunc(specClient, realmName)
}

// UpdateClientCalls gets all the calls that were made to UpdateClient.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateClientCalls())
func (mock *KeycloakInterfaceMock) UpdateClientCalls() []struct {
	SpecClient *v1alpha1.KeycloakClient
	RealmName  string
} {
	var calls []struct {
		SpecClient *v1alpha1.KeycloakClient
		RealmName  string
	}
	lockKeycloakInterfaceMockUpdateClient.RLock()
	calls = mock.calls.UpdateClient
	lockKeycloakInterfaceMockUpdateClient.RUnlock()
	return calls
}

// UpdateIdentityProvider calls UpdateIdentityProviderFunc.
func (mock *KeycloakInterfaceMock) UpdateIdentityProvider(specIdentityProvider *v1alpha1.KeycloakIdentityProvider, realmName string) error {
	if mock.UpdateIdentityProviderFunc == nil {
		panic("KeycloakInterfaceMock.UpdateIdentityProviderFunc: method is nil but KeycloakInterface.UpdateIdentityProvider was just called")
	}
	callInfo := struct {
		SpecIdentityProvider *v1alpha1.KeycloakIdentityProvider
		RealmName            string
	}{
		SpecIdentityProvider: specIdentityProvider,
		RealmName:            realmName,
	}
	lockKeycloakInterfaceMockUpdateIdentityProvider.Lock()
	mock.calls.UpdateIdentityProvider = append(mock.calls.UpdateIdentityProvider, callInfo)
	lockKeycloakInterfaceMockUpdateIdentityProvider.Unlock()
	return mock.UpdateIdentityProviderFunc(specIdentityProvider, realmName)
}

// UpdateIdentityProviderCalls gets all the calls that were made to UpdateIdentityProvider.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateIdentityProviderCalls())
func (mock *KeycloakInterfaceMock) UpdateIdentityProviderCalls() []struct {
	SpecIdentityProvider *v1alpha1.KeycloakIdentityProvider
	RealmName            string
} {
	var calls []struct {
		SpecIdentityProvider *v1alpha1.KeycloakIdentityProvider
		RealmName            string
	}
	lockKeycloakInterfaceMockUpdateIdentityProvider.RLock()
	calls = mock.calls.UpdateIdentityProvider
	lockKeycloakInterfaceMockUpdateIdentityProvider.RUnlock()
	return calls
}

// UpdatePassword calls UpdatePasswordFunc.
func (mock *KeycloakInterfaceMock) UpdatePassword(user *v1alpha1.KeycloakApiUser, realmName string, newPass string) error {
	if mock.UpdatePasswordFunc == nil {
		panic("KeycloakInterfaceMock.UpdatePasswordFunc: method is nil but KeycloakInterface.UpdatePassword was just called")
	}
	callInfo := struct {
		User      *v1alpha1.KeycloakApiUser
		RealmName string
		NewPass   string
	}{
		User:      user,
		RealmName: realmName,
		NewPass:   newPass,
	}
	lockKeycloakInterfaceMockUpdatePassword.Lock()
	mock.calls.UpdatePassword = append(mock.calls.UpdatePassword, callInfo)
	lockKeycloakInterfaceMockUpdatePassword.Unlock()
	return mock.UpdatePasswordFunc(user, realmName, newPass)
}

// UpdatePasswordCalls gets all the calls that were made to UpdatePassword.
// Check the length with:
//     len(mockedKeycloakInterface.UpdatePasswordCalls())
func (mock *KeycloakInterfaceMock) UpdatePasswordCalls() []struct {
	User      *v1alpha1.KeycloakApiUser
	RealmName string
	NewPass   string
} {
	var calls []struct {
		User      *v1alpha1.KeycloakApiUser
		RealmName string
		NewPass   string
	}
	lockKeycloakInterfaceMockUpdatePassword.RLock()
	calls = mock.calls.UpdatePassword
	lockKeycloakInterfaceMockUpdatePassword.RUnlock()
	return calls
}

// UpdateRealm calls UpdateRealmFunc.
func (mock *KeycloakInterfaceMock) UpdateRealm(specRealm *v1alpha1.KeycloakRealm) error {
	if mock.UpdateRealmFunc == nil {
		panic("KeycloakInterfaceMock.UpdateRealmFunc: method is nil but KeycloakInterface.UpdateRealm was just called")
	}
	callInfo := struct {
		SpecRealm *v1alpha1.KeycloakRealm
	}{
		SpecRealm: specRealm,
	}
	lockKeycloakInterfaceMockUpdateRealm.Lock()
	mock.calls.UpdateRealm = append(mock.calls.UpdateRealm, callInfo)
	lockKeycloakInterfaceMockUpdateRealm.Unlock()
	return mock.UpdateRealmFunc(specRealm)
}

// UpdateRealmCalls gets all the calls that were made to UpdateRealm.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateRealmCalls())
func (mock *KeycloakInterfaceMock) UpdateRealmCalls() []struct {
	SpecRealm *v1alpha1.KeycloakRealm
} {
	var calls []struct {
		SpecRealm *v1alpha1.KeycloakRealm
	}
	lockKeycloakInterfaceMockUpdateRealm.RLock()
	calls = mock.calls.UpdateRealm
	lockKeycloakInterfaceMockUpdateRealm.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *KeycloakInterfaceMock) UpdateUser(specUser *v1alpha1.KeycloakUser, realmName string) error {
	if mock.UpdateUserFunc == nil {
		panic("KeycloakInterfaceMock.UpdateUserFunc: method is nil but KeycloakInterface.UpdateUser was just called")
	}
	callInfo := struct {
		SpecUser  *v1alpha1.KeycloakUser
		RealmName string
	}{
		SpecUser:  specUser,
		RealmName: realmName,
	}
	lockKeycloakInterfaceMockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	lockKeycloakInterfaceMockUpdateUser.Unlock()
	return mock.UpdateUserFunc(specUser, realmName)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockedKeycloakInterface.UpdateUserCalls())
func (mock *KeycloakInterfaceMock) UpdateUserCalls() []struct {
	SpecUser  *v1alpha1.KeycloakUser
	RealmName string
} {
	var calls []struct {
		SpecUser  *v1alpha1.KeycloakUser
		RealmName string
	}
	lockKeycloakInterfaceMockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	lockKeycloakInterfaceMockUpdateUser.RUnlock()
	return calls
}
